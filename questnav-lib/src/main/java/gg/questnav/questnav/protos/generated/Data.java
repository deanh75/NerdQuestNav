// Code generated by protocol buffer compiler. Do not edit!
package gg.questnav.questnav.protos.generated;

import edu.wpi.first.math.proto.Geometry2D;
import java.io.IOException;
import us.hebi.quickbuf.Descriptors;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.ProtoUtil;
import us.hebi.quickbuf.RepeatedByte;
import us.hebi.quickbuf.RepeatedDouble;

public final class Data {
    private static final RepeatedByte descriptorData = ProtoUtil.decodeBase64(1562,
        "CgpkYXRhLnByb3RvEhRxdWVzdG5hdi5wcm90b3MuZGF0YRoQZ2VvbWV0cnkyZC5wcm90byKNAQoZUHJv" + 
        "dG9idWZRdWVzdE5hdkZyYW1lRGF0YRIfCgtmcmFtZV9jb3VudBgBIAEoBVIKZnJhbWVDb3VudBIcCgl0" + 
        "aW1lc3RhbXAYAiABKAFSCXRpbWVzdGFtcBIxCgZwb3NlMmQYAyABKAsyGS53cGkucHJvdG8uUHJvdG9i" + 
        "dWZQb3NlMmRSBnBvc2UyZCKoAQoaUHJvdG9idWZRdWVzdE5hdkRldmljZURhdGESMgoVdHJhY2tpbmdf" + 
        "bG9zdF9jb3VudGVyGAEgASgFUhN0cmFja2luZ0xvc3RDb3VudGVyEi0KEmN1cnJlbnRseV90cmFja2lu" + 
        "ZxgCIAEoCFIRY3VycmVudGx5VHJhY2tpbmcSJwoPYmF0dGVyeV9wZXJjZW50GAMgASgFUg5iYXR0ZXJ5" + 
        "UGVyY2VudCI4ChdQcm90b2J1ZlF1ZXN0TmF2VGFnRGF0YRIdCgh0YWdfZGF0YRgBIAMoAUICEAFSB3Rh" + 
        "Z0RhdGFCQwolZ2cucXVlc3RuYXYucXVlc3RuYXYucHJvdG9zLmdlbmVyYXRlZKoCGVF1ZXN0TmF2LlBy" + 
        "b3Rvcy5HZW5lcmF0ZWRKoQgKBhIEAAMlAQoICgEMEgMAAxUKCAoBAhIDAgAdCggKAQgSAwMANgoJCgII" + 
        "JRIDAwA2CggKAQgSAwQAPgoJCgIIARIDBAA+CiUKAgMAEgMHABoaGiBJbXBvcnQgZ2VvbWV0cnkgbWVz" + 
        "c2FnZXMKCjMKAgQAEgQKABMBGicgVHJhY2tpbmcgZGF0YSB0aGF0IGlzIHNlbnQgZXZlcnkgbG9vcAoK" + 
        "CgoDBAABEgMKCCEKNgoEBAACABIDDAIYGikgTnVtYmVyIG9mIGZyYW1lcyBwcm9jZXNzZWQgYnkgdGhl" + 
        "IFF1ZXN0CgoMCgUEAAIABRIDDAIHCgwKBQQAAgABEgMMCBMKDAoFBAACAAMSAwwWFwo/CgQEAAIBEgMP" + 
        "AhcaMiBUaW1lIChpbiBzZWNvbmRzKSBzaW5jZSB0aGUgUXVlc3ROYXYgYXBwIHN0YXJ0ZWQKCgwKBQQA" + 
        "AgEFEgMPAggKDAoFBAACAQESAw8JEgoMCgUEAAIBAxIDDxUWCjoKBAQAAgISAxICJhotIFRoZSAyZCBm" + 
        "aWVsZC1yZWxhdGl2ZSBwb3NpdGlvbiBvZiB0aGUgcXVlc3QKCgwKBQQAAgIGEgMSAhoKDAoFBAACAgES" + 
        "AxIbIQoMCgUEAAICAxIDEiQlCi0KAgQBEgQWAB8BGiEgRGV2aWNlIGRhdGEgdGhhdCBpcyBzZW50IHNs" + 
        "b3dlcgoKCgoDBAEBEgMWCCIKYAoEBAECABIDGAIiGlMgTnVtYmVyIG9mIHRpbWVzIHRoZSBRdWVzdCBo" + 
        "YXMgbG9zdCB0cmFja2luZyBhZnRlciBoYXZpbmcgaXQgc2luY2UgdGhlIGFwcCBzdGFydGVkCgoMCgUE" + 
        "AQIABRIDGAIHCgwKBQQBAgABEgMYCB0KDAoFBAECAAMSAxggIQoyCgQEAQIBEgMbAh4aJSBJZiB0aGUg",
        "UXVlc3QgaXMgY3VycmVudGx5IHRyYWNraW5nPwoKDAoFBAECAQUSAxsCBgoMCgUEAQIBARIDGwcZCgwK" + 
        "BQQBAgEDEgMbHB0KMgoEBAECAhIDHgIcGiUgVGhlIGJhdHRlcnkgcGVyY2VudGFnZSBvZiB0aGUgUXVl" + 
        "c3QKCgwKBQQBAgIFEgMeAgcKDAoFBAECAgESAx4IFwoMCgUEAQICAxIDHhobCi4KAgQCEgQiACUBGiIg" + 
        "VGFnIERhdGEgdGhhdCBpcyBzZW50IGV2ZXJ5IGxvb3AKCgoKAwQCARIDIggfCioKBAQCAgASAyQCLRod" + 
        "IFRoZSB0YWcgZGF0YSBmcm9tIHRoZSBxdWVzdAoKDAoFBAICAAQSAyQCCgoMCgUEAgIABRIDJAsRCgwK" + 
        "BQQCAgABEgMkEhoKDAoFBAICAAMSAyQdHgoMCgUEAgIACBIDJB8sCg0KBgQCAgAIAhIDJCArYgZwcm90" + 
        "bzM=");

    static final Descriptors.FileDescriptor descriptor = Descriptors.FileDescriptor.internalBuildGeneratedFileFrom("data.proto", "questnav.protos.data", descriptorData, Geometry2D.getDescriptor());

    static final Descriptors.Descriptor questnav_protos_data_ProtobufQuestNavFrameData_descriptor = descriptor.internalContainedType(55, 141, "ProtobufQuestNavFrameData", "questnav.protos.data.ProtobufQuestNavFrameData");

    static final Descriptors.Descriptor questnav_protos_data_ProtobufQuestNavDeviceData_descriptor = descriptor.internalContainedType(199, 168, "ProtobufQuestNavDeviceData", "questnav.protos.data.ProtobufQuestNavDeviceData");

    static final Descriptors.Descriptor questnav_protos_data_ProtobufQuestNavTagData_descriptor = descriptor.internalContainedType(369, 56, "ProtobufQuestNavTagData", "questnav.protos.data.ProtobufQuestNavTagData");

    /**
     * @return this proto file's descriptor.
     */
    public static Descriptors.FileDescriptor getDescriptor() {
        return descriptor;
    }

    /**
     * <pre>
     *  Tracking data that is sent every loop
     * </pre>
     *
     * Protobuf type {@code ProtobufQuestNavFrameData}
     */
    public static final class ProtobufQuestNavFrameData extends ProtoMessage<ProtobufQuestNavFrameData> implements Cloneable {
        private static final long serialVersionUID = 0L;

        /**
         * <pre>
         *  Time (in seconds) since the QuestNav app started
         * </pre>
         *
         * <code>optional double timestamp = 2;</code>
         */
        private double timestamp;

        /**
         * <pre>
         *  Number of frames processed by the Quest
         * </pre>
         *
         * <code>optional int32 frame_count = 1;</code>
         */
        private int frameCount;

        /**
         * <pre>
         *  The 2d field-relative position of the quest
         * </pre>
         *
         * <code>optional .wpi.proto.ProtobufPose2d pose2d = 3;</code>
         */
        private final Geometry2D.ProtobufPose2d pose2D = Geometry2D.ProtobufPose2d.newInstance();

        private ProtobufQuestNavFrameData() {
        }

        /**
         * <pre>
         *  Tracking data that is sent every loop
         * </pre>
         *
         * @return a new empty instance of {@code ProtobufQuestNavFrameData}
         */
        public static ProtobufQuestNavFrameData newInstance() {
            return new ProtobufQuestNavFrameData();
        }

        /**
         * <pre>
         *  Time (in seconds) since the QuestNav app started
         * </pre>
         *
         * <code>optional double timestamp = 2;</code>
         * @return whether the timestamp field is set
         */
        public boolean hasTimestamp() {
            return (bitField0_ & 0x00000001) != 0;
        }

        /**
         * <pre>
         *  Time (in seconds) since the QuestNav app started
         * </pre>
         *
         * <code>optional double timestamp = 2;</code>
         * @return this
         */
        public ProtobufQuestNavFrameData clearTimestamp() {
            bitField0_ &= ~0x00000001;
            timestamp = 0D;
            return this;
        }

        /**
         * <pre>
         *  Time (in seconds) since the QuestNav app started
         * </pre>
         *
         * <code>optional double timestamp = 2;</code>
         * @return the timestamp
         */
        public double getTimestamp() {
            return timestamp;
        }

        /**
         * <pre>
         *  Time (in seconds) since the QuestNav app started
         * </pre>
         *
         * <code>optional double timestamp = 2;</code>
         * @param value the timestamp to set
         * @return this
         */
        public ProtobufQuestNavFrameData setTimestamp(final double value) {
            bitField0_ |= 0x00000001;
            timestamp = value;
            return this;
        }

        /**
         * <pre>
         *  Number of frames processed by the Quest
         * </pre>
         *
         * <code>optional int32 frame_count = 1;</code>
         * @return whether the frameCount field is set
         */
        public boolean hasFrameCount() {
            return (bitField0_ & 0x00000002) != 0;
        }

        /**
         * <pre>
         *  Number of frames processed by the Quest
         * </pre>
         *
         * <code>optional int32 frame_count = 1;</code>
         * @return this
         */
        public ProtobufQuestNavFrameData clearFrameCount() {
            bitField0_ &= ~0x00000002;
            frameCount = 0;
            return this;
        }

        /**
         * <pre>
         *  Number of frames processed by the Quest
         * </pre>
         *
         * <code>optional int32 frame_count = 1;</code>
         * @return the frameCount
         */
        public int getFrameCount() {
            return frameCount;
        }

        /**
         * <pre>
         *  Number of frames processed by the Quest
         * </pre>
         *
         * <code>optional int32 frame_count = 1;</code>
         * @param value the frameCount to set
         * @return this
         */
        public ProtobufQuestNavFrameData setFrameCount(final int value) {
            bitField0_ |= 0x00000002;
            frameCount = value;
            return this;
        }

        /**
         * <pre>
         *  The 2d field-relative position of the quest
         * </pre>
         *
         * <code>optional .wpi.proto.ProtobufPose2d pose2d = 3;</code>
         * @return whether the pose2D field is set
         */
        public boolean hasPose2D() {
            return (bitField0_ & 0x00000004) != 0;
        }

        /**
         * <pre>
         *  The 2d field-relative position of the quest
         * </pre>
         *
         * <code>optional .wpi.proto.ProtobufPose2d pose2d = 3;</code>
         * @return this
         */
        public ProtobufQuestNavFrameData clearPose2D() {
            bitField0_ &= ~0x00000004;
            pose2D.clear();
            return this;
        }

        /**
         * <pre>
         *  The 2d field-relative position of the quest
         * </pre>
         *
         * <code>optional .wpi.proto.ProtobufPose2d pose2d = 3;</code>
         *
         * This method returns the internal storage object without modifying any has state.
         * The returned object should not be modified and be treated as read-only.
         *
         * Use {@link #getMutablePose2D()} if you want to modify it.
         *
         * @return internal storage object for reading
         */
        public Geometry2D.ProtobufPose2d getPose2D() {
            return pose2D;
        }

        /**
         * <pre>
         *  The 2d field-relative position of the quest
         * </pre>
         *
         * <code>optional .wpi.proto.ProtobufPose2d pose2d = 3;</code>
         *
         * This method returns the internal storage object and sets the corresponding
         * has state. The returned object will become part of this message and its
         * contents may be modified as long as the has state is not cleared.
         *
         * @return internal storage object for modifications
         */
        public Geometry2D.ProtobufPose2d getMutablePose2D() {
            bitField0_ |= 0x00000004;
            return pose2D;
        }

        /**
         * <pre>
         *  The 2d field-relative position of the quest
         * </pre>
         *
         * <code>optional .wpi.proto.ProtobufPose2d pose2d = 3;</code>
         * @param value the pose2D to set
         * @return this
         */
        public ProtobufQuestNavFrameData setPose2D(final Geometry2D.ProtobufPose2d value) {
            bitField0_ |= 0x00000004;
            pose2D.copyFrom(value);
            return this;
        }

        @Override
        public ProtobufQuestNavFrameData copyFrom(final ProtobufQuestNavFrameData other) {
            cachedSize = other.cachedSize;
            if ((bitField0_ | other.bitField0_) != 0) {
                bitField0_ = other.bitField0_;
                timestamp = other.timestamp;
                frameCount = other.frameCount;
                pose2D.copyFrom(other.pose2D);
            }
            return this;
        }

        @Override
        public ProtobufQuestNavFrameData mergeFrom(final ProtobufQuestNavFrameData other) {
            if (other.isEmpty()) {
                return this;
            }
            cachedSize = -1;
            if (other.hasTimestamp()) {
                setTimestamp(other.timestamp);
            }
            if (other.hasFrameCount()) {
                setFrameCount(other.frameCount);
            }
            if (other.hasPose2D()) {
                getMutablePose2D().mergeFrom(other.pose2D);
            }
            return this;
        }

        @Override
        public ProtobufQuestNavFrameData clear() {
            if (isEmpty()) {
                return this;
            }
            cachedSize = -1;
            bitField0_ = 0;
            timestamp = 0D;
            frameCount = 0;
            pose2D.clear();
            return this;
        }

        @Override
        public ProtobufQuestNavFrameData clearQuick() {
            if (isEmpty()) {
                return this;
            }
            cachedSize = -1;
            bitField0_ = 0;
            pose2D.clearQuick();
            return this;
        }

        @Override
        public boolean equals(Object o) {
            if (o == this) {
                return true;
            }
            if (!(o instanceof ProtobufQuestNavFrameData)) {
                return false;
            }
            ProtobufQuestNavFrameData other = (ProtobufQuestNavFrameData) o;
            return bitField0_ == other.bitField0_
                && (!hasTimestamp() || ProtoUtil.isEqual(timestamp, other.timestamp))
                && (!hasFrameCount() || frameCount == other.frameCount)
                && (!hasPose2D() || pose2D.equals(other.pose2D));
        }

        @Override
        public void writeTo(final ProtoSink output) throws IOException {
            if ((bitField0_ & 0x00000001) != 0) {
                output.writeRawByte((byte) 17);
                output.writeDoubleNoTag(timestamp);
            }
            if ((bitField0_ & 0x00000002) != 0) {
                output.writeRawByte((byte) 8);
                output.writeInt32NoTag(frameCount);
            }
            if ((bitField0_ & 0x00000004) != 0) {
                output.writeRawByte((byte) 26);
                output.writeMessageNoTag(pose2D);
            }
        }

        @Override
        protected int computeSerializedSize() {
            int size = 0;
            if ((bitField0_ & 0x00000001) != 0) {
                size += 9;
            }
            if ((bitField0_ & 0x00000002) != 0) {
                size += 1 + ProtoSink.computeInt32SizeNoTag(frameCount);
            }
            if ((bitField0_ & 0x00000004) != 0) {
                size += 1 + ProtoSink.computeMessageSizeNoTag(pose2D);
            }
            return size;
        }

        @Override
        @SuppressWarnings("fallthrough")
        public ProtobufQuestNavFrameData mergeFrom(final ProtoSource input) throws IOException {
            // Enabled Fall-Through Optimization (QuickBuffers)
            int tag = input.readTag();
            while (true) {
                switch (tag) {
                    case 17: {
                        // timestamp
                        timestamp = input.readDouble();
                        bitField0_ |= 0x00000001;
                        tag = input.readTag();
                        if (tag != 8) {
                            break;
                        }
                    }
                    case 8: {
                        // frameCount
                        frameCount = input.readInt32();
                        bitField0_ |= 0x00000002;
                        tag = input.readTag();
                        if (tag != 26) {
                            break;
                        }
                    }
                    case 26: {
                        // pose2D
                        input.readMessage(pose2D);
                        bitField0_ |= 0x00000004;
                        tag = input.readTag();
                        if (tag != 0) {
                            break;
                        }
                    }
                    case 0: {
                        return this;
                    }
                    default: {
                        if (!input.skipField(tag)) {
                            return this;
                        }
                        tag = input.readTag();
                        break;
                    }
                }
            }
        }

        @Override
        public void writeTo(final JsonSink output) throws IOException {
            output.beginObject();
            if ((bitField0_ & 0x00000001) != 0) {
                output.writeDouble(FieldNames.timestamp, timestamp);
            }
            if ((bitField0_ & 0x00000002) != 0) {
                output.writeInt32(FieldNames.frameCount, frameCount);
            }
            if ((bitField0_ & 0x00000004) != 0) {
                output.writeMessage(FieldNames.pose2D, pose2D);
            }
            output.endObject();
        }

        @Override
        public ProtobufQuestNavFrameData mergeFrom(final JsonSource input) throws IOException {
            if (!input.beginObject()) {
                return this;
            }
            while (!input.isAtEnd()) {
                switch (input.readFieldHash()) {
                    case 55126294: {
                        if (input.isAtField(FieldNames.timestamp)) {
                            if (!input.trySkipNullValue()) {
                                timestamp = input.readDouble();
                                bitField0_ |= 0x00000001;
                            }
                        } else {
                            input.skipUnknownField();
                        }
                        break;
                    }
                    case -296512606:
                    case 188405693: {
                        if (input.isAtField(FieldNames.frameCount)) {
                            if (!input.trySkipNullValue()) {
                                frameCount = input.readInt32();
                                bitField0_ |= 0x00000002;
                            }
                        } else {
                            input.skipUnknownField();
                        }
                        break;
                    }
                    case -982466877: {
                        if (input.isAtField(FieldNames.pose2D)) {
                            if (!input.trySkipNullValue()) {
                                input.readMessage(pose2D);
                                bitField0_ |= 0x00000004;
                            }
                        } else {
                            input.skipUnknownField();
                        }
                        break;
                    }
                    default: {
                        input.skipUnknownField();
                        break;
                    }
                }
            }
            input.endObject();
            return this;
        }

        @Override
        public ProtobufQuestNavFrameData clone() {
            return new ProtobufQuestNavFrameData().copyFrom(this);
        }

        @Override
        public boolean isEmpty() {
            return ((bitField0_) == 0);
        }

        public static ProtobufQuestNavFrameData parseFrom(final byte[] data) throws
                InvalidProtocolBufferException {
            return ProtoMessage.mergeFrom(new ProtobufQuestNavFrameData(), data).checkInitialized();
        }

        public static ProtobufQuestNavFrameData parseFrom(final ProtoSource input) throws
                IOException {
            return ProtoMessage.mergeFrom(new ProtobufQuestNavFrameData(), input).checkInitialized();
        }

        public static ProtobufQuestNavFrameData parseFrom(final JsonSource input) throws
                IOException {
            return ProtoMessage.mergeFrom(new ProtobufQuestNavFrameData(), input).checkInitialized();
        }

        /**
         * @return factory for creating ProtobufQuestNavFrameData messages
         */
        public static MessageFactory<ProtobufQuestNavFrameData> getFactory() {
            return ProtobufQuestNavFrameDataFactory.INSTANCE;
        }

        /**
         * @return this type's descriptor.
         */
        public static Descriptors.Descriptor getDescriptor() {
            return Data.questnav_protos_data_ProtobufQuestNavFrameData_descriptor;
        }

        private enum ProtobufQuestNavFrameDataFactory implements MessageFactory<ProtobufQuestNavFrameData> {
            INSTANCE;

            @Override
            public ProtobufQuestNavFrameData create() {
                return ProtobufQuestNavFrameData.newInstance();
            }
        }

        /**
         * Contains name constants used for serializing JSON
         */
        static class FieldNames {
            static final FieldName timestamp = FieldName.forField("timestamp");

            static final FieldName frameCount = FieldName.forField("frameCount", "frame_count");

            static final FieldName pose2D = FieldName.forField("pose2d");
        }
    }

    /**
     * <pre>
     *  Device data that is sent slower
     * </pre>
     *
     * Protobuf type {@code ProtobufQuestNavDeviceData}
     */
    public static final class ProtobufQuestNavDeviceData extends ProtoMessage<ProtobufQuestNavDeviceData> implements Cloneable {
        private static final long serialVersionUID = 0L;

        /**
         * <pre>
         *  Number of times the Quest has lost tracking after having it since the app started
         * </pre>
         *
         * <code>optional int32 tracking_lost_counter = 1;</code>
         */
        private int trackingLostCounter;

        /**
         * <pre>
         *  The battery percentage of the Quest
         * </pre>
         *
         * <code>optional int32 battery_percent = 3;</code>
         */
        private int batteryPercent;

        /**
         * <pre>
         *  If the Quest is currently tracking?
         * </pre>
         *
         * <code>optional bool currently_tracking = 2;</code>
         */
        private boolean currentlyTracking;

        private ProtobufQuestNavDeviceData() {
        }

        /**
         * <pre>
         *  Device data that is sent slower
         * </pre>
         *
         * @return a new empty instance of {@code ProtobufQuestNavDeviceData}
         */
        public static ProtobufQuestNavDeviceData newInstance() {
            return new ProtobufQuestNavDeviceData();
        }

        /**
         * <pre>
         *  Number of times the Quest has lost tracking after having it since the app started
         * </pre>
         *
         * <code>optional int32 tracking_lost_counter = 1;</code>
         * @return whether the trackingLostCounter field is set
         */
        public boolean hasTrackingLostCounter() {
            return (bitField0_ & 0x00000001) != 0;
        }

        /**
         * <pre>
         *  Number of times the Quest has lost tracking after having it since the app started
         * </pre>
         *
         * <code>optional int32 tracking_lost_counter = 1;</code>
         * @return this
         */
        public ProtobufQuestNavDeviceData clearTrackingLostCounter() {
            bitField0_ &= ~0x00000001;
            trackingLostCounter = 0;
            return this;
        }

        /**
         * <pre>
         *  Number of times the Quest has lost tracking after having it since the app started
         * </pre>
         *
         * <code>optional int32 tracking_lost_counter = 1;</code>
         * @return the trackingLostCounter
         */
        public int getTrackingLostCounter() {
            return trackingLostCounter;
        }

        /**
         * <pre>
         *  Number of times the Quest has lost tracking after having it since the app started
         * </pre>
         *
         * <code>optional int32 tracking_lost_counter = 1;</code>
         * @param value the trackingLostCounter to set
         * @return this
         */
        public ProtobufQuestNavDeviceData setTrackingLostCounter(final int value) {
            bitField0_ |= 0x00000001;
            trackingLostCounter = value;
            return this;
        }

        /**
         * <pre>
         *  The battery percentage of the Quest
         * </pre>
         *
         * <code>optional int32 battery_percent = 3;</code>
         * @return whether the batteryPercent field is set
         */
        public boolean hasBatteryPercent() {
            return (bitField0_ & 0x00000002) != 0;
        }

        /**
         * <pre>
         *  The battery percentage of the Quest
         * </pre>
         *
         * <code>optional int32 battery_percent = 3;</code>
         * @return this
         */
        public ProtobufQuestNavDeviceData clearBatteryPercent() {
            bitField0_ &= ~0x00000002;
            batteryPercent = 0;
            return this;
        }

        /**
         * <pre>
         *  The battery percentage of the Quest
         * </pre>
         *
         * <code>optional int32 battery_percent = 3;</code>
         * @return the batteryPercent
         */
        public int getBatteryPercent() {
            return batteryPercent;
        }

        /**
         * <pre>
         *  The battery percentage of the Quest
         * </pre>
         *
         * <code>optional int32 battery_percent = 3;</code>
         * @param value the batteryPercent to set
         * @return this
         */
        public ProtobufQuestNavDeviceData setBatteryPercent(final int value) {
            bitField0_ |= 0x00000002;
            batteryPercent = value;
            return this;
        }

        /**
         * <pre>
         *  If the Quest is currently tracking?
         * </pre>
         *
         * <code>optional bool currently_tracking = 2;</code>
         * @return whether the currentlyTracking field is set
         */
        public boolean hasCurrentlyTracking() {
            return (bitField0_ & 0x00000004) != 0;
        }

        /**
         * <pre>
         *  If the Quest is currently tracking?
         * </pre>
         *
         * <code>optional bool currently_tracking = 2;</code>
         * @return this
         */
        public ProtobufQuestNavDeviceData clearCurrentlyTracking() {
            bitField0_ &= ~0x00000004;
            currentlyTracking = false;
            return this;
        }

        /**
         * <pre>
         *  If the Quest is currently tracking?
         * </pre>
         *
         * <code>optional bool currently_tracking = 2;</code>
         * @return the currentlyTracking
         */
        public boolean getCurrentlyTracking() {
            return currentlyTracking;
        }

        /**
         * <pre>
         *  If the Quest is currently tracking?
         * </pre>
         *
         * <code>optional bool currently_tracking = 2;</code>
         * @param value the currentlyTracking to set
         * @return this
         */
        public ProtobufQuestNavDeviceData setCurrentlyTracking(final boolean value) {
            bitField0_ |= 0x00000004;
            currentlyTracking = value;
            return this;
        }

        @Override
        public ProtobufQuestNavDeviceData copyFrom(final ProtobufQuestNavDeviceData other) {
            cachedSize = other.cachedSize;
            if ((bitField0_ | other.bitField0_) != 0) {
                bitField0_ = other.bitField0_;
                trackingLostCounter = other.trackingLostCounter;
                batteryPercent = other.batteryPercent;
                currentlyTracking = other.currentlyTracking;
            }
            return this;
        }

        @Override
        public ProtobufQuestNavDeviceData mergeFrom(final ProtobufQuestNavDeviceData other) {
            if (other.isEmpty()) {
                return this;
            }
            cachedSize = -1;
            if (other.hasTrackingLostCounter()) {
                setTrackingLostCounter(other.trackingLostCounter);
            }
            if (other.hasBatteryPercent()) {
                setBatteryPercent(other.batteryPercent);
            }
            if (other.hasCurrentlyTracking()) {
                setCurrentlyTracking(other.currentlyTracking);
            }
            return this;
        }

        @Override
        public ProtobufQuestNavDeviceData clear() {
            if (isEmpty()) {
                return this;
            }
            cachedSize = -1;
            bitField0_ = 0;
            trackingLostCounter = 0;
            batteryPercent = 0;
            currentlyTracking = false;
            return this;
        }

        @Override
        public ProtobufQuestNavDeviceData clearQuick() {
            if (isEmpty()) {
                return this;
            }
            cachedSize = -1;
            bitField0_ = 0;
            return this;
        }

        @Override
        public boolean equals(Object o) {
            if (o == this) {
                return true;
            }
            if (!(o instanceof ProtobufQuestNavDeviceData)) {
                return false;
            }
            ProtobufQuestNavDeviceData other = (ProtobufQuestNavDeviceData) o;
            return bitField0_ == other.bitField0_
                && (!hasTrackingLostCounter() || trackingLostCounter == other.trackingLostCounter)
                && (!hasBatteryPercent() || batteryPercent == other.batteryPercent)
                && (!hasCurrentlyTracking() || currentlyTracking == other.currentlyTracking);
        }

        @Override
        public void writeTo(final ProtoSink output) throws IOException {
            if ((bitField0_ & 0x00000001) != 0) {
                output.writeRawByte((byte) 8);
                output.writeInt32NoTag(trackingLostCounter);
            }
            if ((bitField0_ & 0x00000002) != 0) {
                output.writeRawByte((byte) 24);
                output.writeInt32NoTag(batteryPercent);
            }
            if ((bitField0_ & 0x00000004) != 0) {
                output.writeRawByte((byte) 16);
                output.writeBoolNoTag(currentlyTracking);
            }
        }

        @Override
        protected int computeSerializedSize() {
            int size = 0;
            if ((bitField0_ & 0x00000001) != 0) {
                size += 1 + ProtoSink.computeInt32SizeNoTag(trackingLostCounter);
            }
            if ((bitField0_ & 0x00000002) != 0) {
                size += 1 + ProtoSink.computeInt32SizeNoTag(batteryPercent);
            }
            if ((bitField0_ & 0x00000004) != 0) {
                size += 2;
            }
            return size;
        }

        @Override
        @SuppressWarnings("fallthrough")
        public ProtobufQuestNavDeviceData mergeFrom(final ProtoSource input) throws IOException {
            // Enabled Fall-Through Optimization (QuickBuffers)
            int tag = input.readTag();
            while (true) {
                switch (tag) {
                    case 8: {
                        // trackingLostCounter
                        trackingLostCounter = input.readInt32();
                        bitField0_ |= 0x00000001;
                        tag = input.readTag();
                        if (tag != 24) {
                            break;
                        }
                    }
                    case 24: {
                        // batteryPercent
                        batteryPercent = input.readInt32();
                        bitField0_ |= 0x00000002;
                        tag = input.readTag();
                        if (tag != 16) {
                            break;
                        }
                    }
                    case 16: {
                        // currentlyTracking
                        currentlyTracking = input.readBool();
                        bitField0_ |= 0x00000004;
                        tag = input.readTag();
                        if (tag != 0) {
                            break;
                        }
                    }
                    case 0: {
                        return this;
                    }
                    default: {
                        if (!input.skipField(tag)) {
                            return this;
                        }
                        tag = input.readTag();
                        break;
                    }
                }
            }
        }

        @Override
        public void writeTo(final JsonSink output) throws IOException {
            output.beginObject();
            if ((bitField0_ & 0x00000001) != 0) {
                output.writeInt32(FieldNames.trackingLostCounter, trackingLostCounter);
            }
            if ((bitField0_ & 0x00000002) != 0) {
                output.writeInt32(FieldNames.batteryPercent, batteryPercent);
            }
            if ((bitField0_ & 0x00000004) != 0) {
                output.writeBool(FieldNames.currentlyTracking, currentlyTracking);
            }
            output.endObject();
        }

        @Override
        public ProtobufQuestNavDeviceData mergeFrom(final JsonSource input) throws IOException {
            if (!input.beginObject()) {
                return this;
            }
            while (!input.isAtEnd()) {
                switch (input.readFieldHash()) {
                    case -1237870847:
                    case -2011984791: {
                        if (input.isAtField(FieldNames.trackingLostCounter)) {
                            if (!input.trySkipNullValue()) {
                                trackingLostCounter = input.readInt32();
                                bitField0_ |= 0x00000001;
                            }
                        } else {
                            input.skipUnknownField();
                        }
                        break;
                    }
                    case -2041653896:
                    case -1975165933: {
                        if (input.isAtField(FieldNames.batteryPercent)) {
                            if (!input.trySkipNullValue()) {
                                batteryPercent = input.readInt32();
                                bitField0_ |= 0x00000002;
                            }
                        } else {
                            input.skipUnknownField();
                        }
                        break;
                    }
                    case 879013277:
                    case 106200592: {
                        if (input.isAtField(FieldNames.currentlyTracking)) {
                            if (!input.trySkipNullValue()) {
                                currentlyTracking = input.readBool();
                                bitField0_ |= 0x00000004;
                            }
                        } else {
                            input.skipUnknownField();
                        }
                        break;
                    }
                    default: {
                        input.skipUnknownField();
                        break;
                    }
                }
            }
            input.endObject();
            return this;
        }

        @Override
        public ProtobufQuestNavDeviceData clone() {
            return new ProtobufQuestNavDeviceData().copyFrom(this);
        }

        @Override
        public boolean isEmpty() {
            return ((bitField0_) == 0);
        }

        public static ProtobufQuestNavDeviceData parseFrom(final byte[] data) throws
                InvalidProtocolBufferException {
            return ProtoMessage.mergeFrom(new ProtobufQuestNavDeviceData(), data).checkInitialized();
        }

        public static ProtobufQuestNavDeviceData parseFrom(final ProtoSource input) throws
                IOException {
            return ProtoMessage.mergeFrom(new ProtobufQuestNavDeviceData(), input).checkInitialized();
        }

        public static ProtobufQuestNavDeviceData parseFrom(final JsonSource input) throws
                IOException {
            return ProtoMessage.mergeFrom(new ProtobufQuestNavDeviceData(), input).checkInitialized();
        }

        /**
         * @return factory for creating ProtobufQuestNavDeviceData messages
         */
        public static MessageFactory<ProtobufQuestNavDeviceData> getFactory() {
            return ProtobufQuestNavDeviceDataFactory.INSTANCE;
        }

        /**
         * @return this type's descriptor.
         */
        public static Descriptors.Descriptor getDescriptor() {
            return Data.questnav_protos_data_ProtobufQuestNavDeviceData_descriptor;
        }

        private enum ProtobufQuestNavDeviceDataFactory implements MessageFactory<ProtobufQuestNavDeviceData> {
            INSTANCE;

            @Override
            public ProtobufQuestNavDeviceData create() {
                return ProtobufQuestNavDeviceData.newInstance();
            }
        }

        /**
         * Contains name constants used for serializing JSON
         */
        static class FieldNames {
            static final FieldName trackingLostCounter = FieldName.forField("trackingLostCounter", "tracking_lost_counter");

            static final FieldName batteryPercent = FieldName.forField("batteryPercent", "battery_percent");

            static final FieldName currentlyTracking = FieldName.forField("currentlyTracking", "currently_tracking");
        }
    }

    /**
     * <pre>
     *  Tag Data that is sent every loop
     * </pre>
     *
     * Protobuf type {@code ProtobufQuestNavTagData}
     */
    public static final class ProtobufQuestNavTagData extends ProtoMessage<ProtobufQuestNavTagData> implements Cloneable {
        private static final long serialVersionUID = 0L;

        /**
         * <pre>
         *  The tag data from the quest
         * </pre>
         *
         * <code>repeated double tag_data = 1 [packed = true];</code>
         */
        private final RepeatedDouble tagData = RepeatedDouble.newEmptyInstance();

        private ProtobufQuestNavTagData() {
        }

        /**
         * <pre>
         *  Tag Data that is sent every loop
         * </pre>
         *
         * @return a new empty instance of {@code ProtobufQuestNavTagData}
         */
        public static ProtobufQuestNavTagData newInstance() {
            return new ProtobufQuestNavTagData();
        }

        /**
         * <pre>
         *  The tag data from the quest
         * </pre>
         *
         * <code>repeated double tag_data = 1 [packed = true];</code>
         * @return whether the tagData field is set
         */
        public boolean hasTagData() {
            return (bitField0_ & 0x00000001) != 0;
        }

        /**
         * <pre>
         *  The tag data from the quest
         * </pre>
         *
         * <code>repeated double tag_data = 1 [packed = true];</code>
         * @return this
         */
        public ProtobufQuestNavTagData clearTagData() {
            bitField0_ &= ~0x00000001;
            tagData.clear();
            return this;
        }

        /**
         * <pre>
         *  The tag data from the quest
         * </pre>
         *
         * <code>repeated double tag_data = 1 [packed = true];</code>
         *
         * This method returns the internal storage object without modifying any has state.
         * The returned object should not be modified and be treated as read-only.
         *
         * Use {@link #getMutableTagData()} if you want to modify it.
         *
         * @return internal storage object for reading
         */
        public RepeatedDouble getTagData() {
            return tagData;
        }

        /**
         * <pre>
         *  The tag data from the quest
         * </pre>
         *
         * <code>repeated double tag_data = 1 [packed = true];</code>
         *
         * This method returns the internal storage object and sets the corresponding
         * has state. The returned object will become part of this message and its
         * contents may be modified as long as the has state is not cleared.
         *
         * @return internal storage object for modifications
         */
        public RepeatedDouble getMutableTagData() {
            bitField0_ |= 0x00000001;
            return tagData;
        }

        /**
         * <pre>
         *  The tag data from the quest
         * </pre>
         *
         * <code>repeated double tag_data = 1 [packed = true];</code>
         * @param value the tagData to add
         * @return this
         */
        public ProtobufQuestNavTagData addTagData(final double value) {
            bitField0_ |= 0x00000001;
            tagData.add(value);
            return this;
        }

        /**
         * <pre>
         *  The tag data from the quest
         * </pre>
         *
         * <code>repeated double tag_data = 1 [packed = true];</code>
         * @param values the tagData to add
         * @return this
         */
        public ProtobufQuestNavTagData addAllTagData(final double... values) {
            bitField0_ |= 0x00000001;
            tagData.addAll(values);
            return this;
        }

        @Override
        public ProtobufQuestNavTagData copyFrom(final ProtobufQuestNavTagData other) {
            cachedSize = other.cachedSize;
            if ((bitField0_ | other.bitField0_) != 0) {
                bitField0_ = other.bitField0_;
                tagData.copyFrom(other.tagData);
            }
            return this;
        }

        @Override
        public ProtobufQuestNavTagData mergeFrom(final ProtobufQuestNavTagData other) {
            if (other.isEmpty()) {
                return this;
            }
            cachedSize = -1;
            if (other.hasTagData()) {
                getMutableTagData().addAll(other.tagData);
            }
            return this;
        }

        @Override
        public ProtobufQuestNavTagData clear() {
            if (isEmpty()) {
                return this;
            }
            cachedSize = -1;
            bitField0_ = 0;
            tagData.clear();
            return this;
        }

        @Override
        public ProtobufQuestNavTagData clearQuick() {
            if (isEmpty()) {
                return this;
            }
            cachedSize = -1;
            bitField0_ = 0;
            tagData.clear();
            return this;
        }

        @Override
        public boolean equals(Object o) {
            if (o == this) {
                return true;
            }
            if (!(o instanceof ProtobufQuestNavTagData)) {
                return false;
            }
            ProtobufQuestNavTagData other = (ProtobufQuestNavTagData) o;
            return bitField0_ == other.bitField0_
                && (!hasTagData() || tagData.equals(other.tagData));
        }

        @Override
        public void writeTo(final ProtoSink output) throws IOException {
            if ((bitField0_ & 0x00000001) != 0) {
                output.writeRawByte((byte) 10);
                output.writePackedDoubleNoTag(tagData);
            }
        }

        @Override
        protected int computeSerializedSize() {
            int size = 0;
            if ((bitField0_ & 0x00000001) != 0) {
                final int dataSize = 8 * tagData.length();
                size += 1 + ProtoSink.computeDelimitedSize(dataSize);
            }
            return size;
        }

        @Override
        @SuppressWarnings("fallthrough")
        public ProtobufQuestNavTagData mergeFrom(final ProtoSource input) throws IOException {
            // Enabled Fall-Through Optimization (QuickBuffers)
            int tag = input.readTag();
            while (true) {
                switch (tag) {
                    case 10: {
                        // tagData [packed=true]
                        input.readPackedDouble(tagData);
                        bitField0_ |= 0x00000001;
                        tag = input.readTag();
                        if (tag != 0) {
                            break;
                        }
                    }
                    case 0: {
                        return this;
                    }
                    default: {
                        if (!input.skipField(tag)) {
                            return this;
                        }
                        tag = input.readTag();
                        break;
                    }
                    case 9: {
                        // tagData [packed=false]
                        tag = input.readRepeatedDouble(tagData, tag);
                        bitField0_ |= 0x00000001;
                        break;
                    }
                }
            }
        }

        @Override
        public void writeTo(final JsonSink output) throws IOException {
            output.beginObject();
            if ((bitField0_ & 0x00000001) != 0) {
                output.writeRepeatedDouble(FieldNames.tagData, tagData);
            }
            output.endObject();
        }

        @Override
        public ProtobufQuestNavTagData mergeFrom(final JsonSource input) throws IOException {
            if (!input.beginObject()) {
                return this;
            }
            while (!input.isAtEnd()) {
                switch (input.readFieldHash()) {
                    case -1549482396:
                    case -764307153: {
                        if (input.isAtField(FieldNames.tagData)) {
                            if (!input.trySkipNullValue()) {
                                input.readRepeatedDouble(tagData);
                                bitField0_ |= 0x00000001;
                            }
                        } else {
                            input.skipUnknownField();
                        }
                        break;
                    }
                    default: {
                        input.skipUnknownField();
                        break;
                    }
                }
            }
            input.endObject();
            return this;
        }

        @Override
        public ProtobufQuestNavTagData clone() {
            return new ProtobufQuestNavTagData().copyFrom(this);
        }

        @Override
        public boolean isEmpty() {
            return ((bitField0_) == 0);
        }

        public static ProtobufQuestNavTagData parseFrom(final byte[] data) throws
                InvalidProtocolBufferException {
            return ProtoMessage.mergeFrom(new ProtobufQuestNavTagData(), data).checkInitialized();
        }

        public static ProtobufQuestNavTagData parseFrom(final ProtoSource input) throws
                IOException {
            return ProtoMessage.mergeFrom(new ProtobufQuestNavTagData(), input).checkInitialized();
        }

        public static ProtobufQuestNavTagData parseFrom(final JsonSource input) throws IOException {
            return ProtoMessage.mergeFrom(new ProtobufQuestNavTagData(), input).checkInitialized();
        }

        /**
         * @return factory for creating ProtobufQuestNavTagData messages
         */
        public static MessageFactory<ProtobufQuestNavTagData> getFactory() {
            return ProtobufQuestNavTagDataFactory.INSTANCE;
        }

        /**
         * @return this type's descriptor.
         */
        public static Descriptors.Descriptor getDescriptor() {
            return Data.questnav_protos_data_ProtobufQuestNavTagData_descriptor;
        }

        private enum ProtobufQuestNavTagDataFactory implements MessageFactory<ProtobufQuestNavTagData> {
            INSTANCE;

            @Override
            public ProtobufQuestNavTagData create() {
                return ProtobufQuestNavTagData.newInstance();
            }
        }

        /**
         * Contains name constants used for serializing JSON
         */
        static class FieldNames {
            static final FieldName tagData = FieldName.forField("tagData", "tag_data");
        }
    }
}
